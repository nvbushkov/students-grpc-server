// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: studentsdb/students_db.proto

package studentsdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentsDatabaseClient is the client API for StudentsDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentsDatabaseClient interface {
	// AddStudent
	AddStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	// GetStudent
	GetStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	// UpdateStudent
	UpdateStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	// DeleteStudent
	DeleteStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
}

type studentsDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentsDatabaseClient(cc grpc.ClientConnInterface) StudentsDatabaseClient {
	return &studentsDatabaseClient{cc}
}

func (c *studentsDatabaseClient) AddStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/studentsdb.StudentsDatabase/AddStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsDatabaseClient) GetStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/studentsdb.StudentsDatabase/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsDatabaseClient) UpdateStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/studentsdb.StudentsDatabase/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsDatabaseClient) DeleteStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/studentsdb.StudentsDatabase/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentsDatabaseServer is the server API for StudentsDatabase service.
// All implementations must embed UnimplementedStudentsDatabaseServer
// for forward compatibility
type StudentsDatabaseServer interface {
	// AddStudent
	AddStudent(context.Context, *Student) (*Student, error)
	// GetStudent
	GetStudent(context.Context, *Student) (*Student, error)
	// UpdateStudent
	UpdateStudent(context.Context, *Student) (*Student, error)
	// DeleteStudent
	DeleteStudent(context.Context, *Student) (*Student, error)
	mustEmbedUnimplementedStudentsDatabaseServer()
}

// UnimplementedStudentsDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedStudentsDatabaseServer struct {
}

func (UnimplementedStudentsDatabaseServer) AddStudent(context.Context, *Student) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedStudentsDatabaseServer) GetStudent(context.Context, *Student) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedStudentsDatabaseServer) UpdateStudent(context.Context, *Student) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedStudentsDatabaseServer) DeleteStudent(context.Context, *Student) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedStudentsDatabaseServer) mustEmbedUnimplementedStudentsDatabaseServer() {}

// UnsafeStudentsDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentsDatabaseServer will
// result in compilation errors.
type UnsafeStudentsDatabaseServer interface {
	mustEmbedUnimplementedStudentsDatabaseServer()
}

func RegisterStudentsDatabaseServer(s grpc.ServiceRegistrar, srv StudentsDatabaseServer) {
	s.RegisterService(&StudentsDatabase_ServiceDesc, srv)
}

func _StudentsDatabase_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsDatabaseServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentsdb.StudentsDatabase/AddStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsDatabaseServer).AddStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsDatabase_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsDatabaseServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentsdb.StudentsDatabase/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsDatabaseServer).GetStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsDatabase_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsDatabaseServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentsdb.StudentsDatabase/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsDatabaseServer).UpdateStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsDatabase_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsDatabaseServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentsdb.StudentsDatabase/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsDatabaseServer).DeleteStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentsDatabase_ServiceDesc is the grpc.ServiceDesc for StudentsDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentsDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "studentsdb.StudentsDatabase",
	HandlerType: (*StudentsDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStudent",
			Handler:    _StudentsDatabase_AddStudent_Handler,
		},
		{
			MethodName: "GetStudent",
			Handler:    _StudentsDatabase_GetStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _StudentsDatabase_UpdateStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _StudentsDatabase_DeleteStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "studentsdb/students_db.proto",
}
